# frozen_string_literal: true

module Bankroll
  class InterestRate
    extend Dry::Initializer
    extend Callable

    # Uses the method in the Exonio library:
    # https://github.com/noverde/exonio/blob/master/lib/exonio/financial.rb

    option :periods, Types["integer"]
    option :payment, Types["bankroll.decimal"]
    option :present_value, Types["bankroll.decimal"]
    option :future_value, Types["bankroll.decimal"], default: -> { Decimal[0] }

    def call(guess = 0.1)
      significance_required = 1e-6
      stop = false

      next_guess = 0

      loop do
        temp = newton_iteration(
          guess,
          @periods,
          @payment,
          @present_value,
          @future_value,
          0
        )
        next_guess = (guess - temp).round(20)
        difference = (next_guess - guess).abs
        stop = difference < significance_required
        guess = next_guess
        break if stop
      end

      next_guess
    end

    private

    # This method was borrowed from the NumPy rate formula
    # which was generated by Sage
    def newton_iteration(r, n, p, x, y, w)
      t1 = (r + 1)**n
      t2 = (r + 1)**(n - 1)
      ((y + (t1 * x) + (p * (t1 - 1) * ((r * w) + 1) / r)) / ((n * t2 * x) - (p * (t1 - 1) * ((r * w) + 1) / (r**2)) + (n * p * t2 * ((r * w) + 1) / r) + (p * (t1 - 1) * w / r)))
    end
  end
end
